1.通用类型参数宏函数
#include <stdio.h>
#define MAX(A, B) A > B ? A : B //这个就是一个宏函数
int main(int argc, char const *argv[])
{
    int max = MAX(10, 20);//调用宏函数
    printf("max=%d", max);
    return 0;
}

2.短名嗲用函数和多行宏函数
#include <stdio.h>
#define DO dosomething
#define MAX(A, B) A > B ? A : B //这个就是一个宏函数
#define LOOP(FROM, TO, CMD)         \    //定义多行宏函数可以简化某些函数的写法
    for (int i = FROM; i < TO; i++) \
    {                               \
        CMD;                        \
    }

void dosomething()
{
    printf("get up\n");
    printf("use bathroom\n");
    printf("brush my teeth\n");
    printf("wash my face\n");
    printf("go to work!!!\n");
}

int main(int argc, char const *argv[])
{
    int max = MAX(10, 20);
    printf("max=%d\n", max);
    LOOP(0, 5, printf("hello wrold from LOOP marco!\n"));
    DO();

    return 0;
}

3.通用名称函数调用，即可以定义一个通用宏灵活调用名字有共同点的不同函数
#include <stdio.h>
#define DO dosomething //短名调用
//#define f(NAME) kenny##NAME() //通用名称调用
#define f(NAME) kenny##NAME##File() //通用名称调用，注意需要利用两个#来连接固定的部分和可变的部分
void dosomething()
{
    printf("get up\n");
    printf("use bathroom\n");
    printf("brush my teeth\n");
    printf("wash my face\n");
    printf("go to work!!!\n");
}
void kennyWriteFile()
{
    FILE *fp = fopen("test.txt", "wb");
    fprintf(fp, "hello,i am kenny!!!\n");
    fprintf(fp, "i like learning program!!!\n");
    fprintf(fp, "i write a lot of demos\n");
    fprintf(fp, "i am making progress!!!\n");
    fclose(fp);
}
void kennyReadFile()
{
    FILE *fp = fopen("test.txt", "rb");
    char buf[100];
    while (fgets(buf, 100, fp) != NULL)
    {
        printf("%s\n", buf);
    }
    fclose(fp);
}

int main(int argc, char const *argv[])
{
    DO();
    //f(WriteFile);
    //f(ReadFile);
    f(Write);
    f(Read);
    return 0;
}

4.宏函数可变参数
#include <stdio.h>
#define LOG_I(FORMAT, ...) \
    printf("INFO:");       \
    printf(FORMAT, __VA_ARGS__);
int main(int argc, char const *argv[])
{
    LOG_I("hello %s,i am learnig you,i am %d percent love you", "C++", 100);
    return 0;
}

5.输出不同级别的日志信息
#include <stdio.h>

#define LOG(LEVEL, FORMAT, ...) \
    printf(LEVEL);              \
    printf(FORMAT, __VA_ARGS__);
#define LOG_E(FORMAT, ...) LOG("ERROR:", FORMAT, __VA_ARGS__);
#define LOG_W(FORMAT, ...) LOG("WARNING:", FORMAT, __VA_ARGS__);
#define LOG_I(FORMAT, ...) LOG("INFO:", FORMAT, __VA_ARGS__);
#define LOG_D(FORMAT, ...) LOG("DEBUG:", FORMAT, __VA_ARGS__);
int main(int argc, char const *argv[])
{
    //LOG_I("hello %s,i am learnig you,i am %d percent love you", "C++", 100);
    LOG_D("title=%s sum=%d\n", "Test", 1000);
    LOG_E("%s Problem!!! Out of %s,you need to %s it\n", "Runtime", "Memory", "Fix");
    LOG_I("Processor:%s,%d Git memory,%d Git handdrive,%f ghz fraquency\n", "Intel core i9", 8, 500, 3.3);
    return 0;
}

结果：
DEBUG:title=Test sum=1000
ERROR:Runtime Problem!!! Out of Memory,you need to Fix it
INFO:Processor:Intel core i9,8 Git memory,500 Git handdrive,3.300000 ghz fraquency
